QUESTION: When do you decide when components should be split?
ANSWER: SEPARATION OF CONCERNS
-Every component should only do "one thing"
*Simplicity and Code Colocation is also an option*

Comes down to preference and team


Element Selector - elements tell the browser what to display
defined by putting the element on display ie "button" - best practice is to clearly define i.e.
selector: "app-button"
*typically used with a new component built to wrap other elements but doesn't replace one
*typical default

Attribute Selector - attributes define how they will behave
*typically used to extend a built in element
.ts
selector: 'button[appButton]'
selector: 'button.button"


.html
<button appButton>
</button>

Best practice to prefix custom attributes that are meant to be used by Angular with you application prefix
i.e. app

@Component selector works like a CSS selector

VIEW ENCAPSULATION
Enums
-Typescript Feature
Enums are "groups of allowed values"

enum ViewEncapsulation
{
  Emulated = 0,
  None = 2,
  ShadowDom = 3
}

Internally, the pre-defined allowed values (e.g. "Emulated") map to integers which can be used by Angular as identifiers


THE SHADOW DOM
  A browser feature that allows you to attach hidden DOM structures to DOM elements

  EXAMPLE:
  The built-in <video> element hides a more complex DOM tree that's used internally

  For CSS styling, the Shadow DOM can be used to scope CSS styles to that hidden tree- instead of applying styles globally to the entire page.

  Angular can emulate this Shadow DOM browser feature for its own components.


COMPONENT HOST ELEMENTS
Every Angular component has a HOST ELEMENT

EXAMPLE:
A component with a selector of "app-header" targets an <app-header> element which is rendered into the real DOM
*The elements targeted by your component selectors do NOT act as placeholders and ARE NOT replaced when the page is rendered!
Instead the selected elements are preserved and simply "enhanced"/taken over by your component logic & markup.
